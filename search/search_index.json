{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"cinema-server-monolith documentation Python Docstring for cinema-server-monolith Content server_app server_monolith General information This is documentation for Django project \"cinema-server-monolith\" created as a Bachelor's diploma project Source code: GitHub References JavaDoc for cinema-client JavaDoc for cinema-conductor REST API documentation","title":"cinema-server-monolith documentation"},{"location":"#cinema-server-monolith-documentation","text":"Python Docstring for cinema-server-monolith","title":"cinema-server-monolith documentation"},{"location":"#content","text":"server_app server_monolith","title":"Content"},{"location":"#general-information","text":"This is documentation for Django project \"cinema-server-monolith\" created as a Bachelor's diploma project Source code: GitHub","title":"General information"},{"location":"#references","text":"JavaDoc for cinema-client JavaDoc for cinema-conductor REST API documentation","title":"References"},{"location":"home/","text":"Reference","title":"Reference"},{"location":"home/#reference","text":"","title":"Reference"},{"location":"server_app/","text":"server_app admin.py FilmAdmin ( admin.ModelAdmin ) A class for displaying Cinema entity in proper way for Admin-page Attributes : list_display : A list of fields for displaying in Admin-page list_display_links : A list of fields for links search_fields : A list of fields for searching CinemaAdmin ( admin.ModelAdmin ): A class for displaying Cinema entity in proper way for Admin-page Attributes : list_display : A list of fields for displaying in Admin-page list_display_links : A list of fields for links search_fields : A list of fields for searching PosterAdmin ( admin.ModelAdmin ): A class for displaying Poster entity in proper way for Admin-page Attributes : list_display : A list of fields for displaying in Admin-page list_display_links : A list of fields for links search_fields : A list of fields for searching TimelineAdmin ( admin.ModelAdmin ): A class for displaying Timeline entity in proper way for Admin-page Attributes : list_display : A list of fields for displaying in Admin-page list_display_links : A list of fields for links search_fields : A list of fields for searching HallAdmin ( admin.ModelAdmin ): A class for displaying Hall entity in proper way for Admin-page Attributes : list_display : A list of fields for displaying in Admin-page list_display_links : A list of fields for links search_fields : A list of fields for searching TicketAdmin ( admin.ModelAdmin ): A class for displaying Ticket entity in proper way for Admin-page Attributes : list_display : A list of fields for displaying in Admin-page list_display_links : A list of fields for links search_fields : A list of fields for searching StaffAdmin ( admin.ModelAdmin ): A class for displaying Staff entity in proper way for Admin-page Attributes : list_display : A list of fields for displaying in Admin-page list_display_links : A list of fields for links search_fields : A list of fields for searching forms.py HallForm ( forms.ModelForm ): A class that represents a form for Hall entity CinemaForm ( forms.ModelForm ): A class that represents a form for Cinema entity PosterForm ( forms.ModelForm ): A class that represents a form for Poster entity TimelineForm ( forms.ModelForm ): A class that represents a form for Timeline entity models.py Film ( models.Model ): A class that represents Film entity Attributes : GENRE : An enumeration for available genres title : A film's title description : A film's description date : A film's date duration : A film's duration genre : A film's genre video_url : A film's trailer URL ( youtube ) pic_url : A film's poster URL Cinema ( models.Model ): A class that represents Cinema entity Attributes : name : A cinema's name address : A cinema's address in current city city : City's name telephone : A cinema's telephone geo_lat : Latitude for location on the map geo_lon : Longitude for location on the map pic_url : A cinema's picture/logo URL Poster ( models.Model ): A class that represents Poster entity Attributes : cinema_id : Cinema's ID for linking film_id : Film's ID for linking Hall ( models.Model ): A class that represents Hall entity Attributes : name : A hall's name cinema_id : Cinema's ID for linking hall_json : JSON-entity for hall rendering Timeline ( models.Model ): A class that represents Timeline entity Attributes : cinema_id : Cinema's ID for linking film_id : Film's ID for linking hall_id : Hall's ID for linking time : A session's time date : A session's date price : A price for current price Ticket ( models.Model ): A class that represents Ticket entity Attributes : STATUS : A enumeration that contains Ticket's status place : Place in hall for current session status : Ticket's status user : A User's ID timeline_id : Timeline's ID for linking Staff ( models.Model ): A class that represents Staff entity. Attributes : user_id : User's ID for linking cinema_id : Cinema's ID for linking permission.py IsStaffOrAdminWriteOnly ( permissions.BasePermission ): Custom permission for certain REST endpoints So if you are certain user or anon - you could only fulfill GET request to marked endpoints; if you are staff or admin - you could fulfill all types of requests Methods : has_permission(self, request, view) : Check your user's type to allow access to write operations return True if permission is granted serializers.py FilmSerializer ( serializers.ModelSerializer ): Serializer for Film entity CinemaSerializer ( serializers.ModelSerializer ): Serializer for Cinema entity TimelineSerializer ( serializers.ModelSerializer ): Serializer for Timeline entity PosterSerializer ( serializers.ModelSerializer ): Serializer for Poster entity HallSerializer ( serializers.ModelSerializer ): Serializer for Hall entity TicketSerializer ( serializers.ModelSerializer ): Serializer for Film entity Methods : get_code(self) : Generate ticket's QR code return unique ticket code create(self, validated_data) : Create new Ticket entity using pre-generated unique QR-code param validated_data return created Ticket entity StaffSerializer ( serializers.ModelSerializer ): Serializer for Film entity UserSerializer ( serializers.ModelSerializer ): Serializer for Film entity Methods : create(self, validated_data) : Create new User from mobile-client; pay attention on is_staff field - it is False param validated_data return created User tables.py FilmTable ( tables.Table ): Table for Film entities; used for generation bootstrap-table Attributes : about_col : extra column for opening \"About Film\" page CinemaTableEditable ( tables.Table ): Table for Cinema entities ( editable ); used for generation bootstrap-table Attributes : update_col : extra column for updating entity delete_col : extra column for deleting entity about_col : extra column for opening \"About Cinema\" page CinemaTableUneditable ( tables.Table ): Table for Cinema entities ( uneditable ); used for generation bootstrap-table Attributes : about_col : extra column for opening \"About Cinema\" page PosterTable ( tables.Table ): Table for Poster entities; used for generation bootstrap-table Attributes : delete_col : extra column for deleting entity TicketTable ( tables.Table ): Table for Ticket entities; used for generation bootstrap-table HallTable ( tables.Table ): Table for Hall entities; used for generation bootstrap-table Attributes : update_col : extra column for updating entity delete_col : extra column for deleting entity TimelineTable ( tables.Table ): Table for Timeline entities; used for generation bootstrap-table Attributes : delete_col : extra column for deleting entity view.py api_film(request) : REST endpoint for Film entity param request: return Film entity api_cinema(request) : REST endpoint for Cinema entity param request: return Cinema entity api_timeline(request) : REST endpoint for Timeline entity param request: return Cinema entity api_poster(request) : REST endpoint for Poster entity param request: return Poster entity api_hall(request) : REST endpoint for Hall entity param request: return Hall entity api_ticket(request) : REST endpoint for Ticket entity param request: return Ticket entity get_staff_job(request) : REST endpoint for Staff entity; used for getting Staff' job param request: return Staff entity api_user(request) : REST endpoint for User entity param request: return User entity CreateUserView ( CreateAPIView ): REST endpoint for creating new user cinema_profile(request, cinema_id) : Get Cinema's profile param request param cinema_id: current cinema's ID return chosen Cinema about_film(request, film_id) : Get Film's info param request: param film_id: current Film's ID return chosen Film about_dev(request) : Get about dev page param request return about dev page about_project(request) : Get about project page param request return about project page FilmTableView( ExportMixin, SingleTableView ): Get all Films entities as a table get(self, request, *args, **kwargs) : Returns Film's table param request param args param kwargs return Film's table cinema_table_all(request) : Returns all Cinema entities as a table param request return Cinema's table form_cinema_update(request, cinema_id) : Returns Cinema's update form param request param cinema_id: Cinema's ID for updating return web-page for updating form_cinema_insert(request) : Returns Cinema's insert form param request return web-page for creating new entity get_poster_table_by_cinema_id(request, cinema_id) : Returns all Poster entities with certain Cinema's ID value param request param cinema_id: linked Cinema's ID return table with all Posters form_poster_insert(request, cinema_id) : Returns Poster's insert form param request param cinema_id: linked Cinema's ID return web-page for creating new entity get_timeline_table_by_cinema_id(request, cinema_id) : Returns all Timeline entities as a table with certain Cinema's ID value param request param cinema_id: linked Cinema's ID return table with all Timeline form_timeline_insert(request, cinema_id) : Returns Timeline's insert form param request param cinema_id: linked Cinema's ID return web-page for creating new entity get_hall_table_by_cinema_id(request, cinema_id) : Returns all Hall entities as a table with certain Cinema's ID value param request param cinema_id: linked Cinema's ID return table with all Hall form_hall_insert(request, cinema_id) : Returns Hall's insert form param request param cinema_id: linked Hall's ID return web-page for creating new entity form_hall_update(request, cinema_id, hall_id) : Returns Hall's update form param request param cinema_id: linked Cinema's ID param hall_id: Hall's ID for updating return web-page for updating","title":"server_app"},{"location":"server_app/#server_app","text":"","title":"server_app"},{"location":"server_app/#adminpy","text":"","title":"admin.py"},{"location":"server_app/#filmadmin-adminmodeladmin","text":"A class for displaying Cinema entity in proper way for Admin-page Attributes : list_display : A list of fields for displaying in Admin-page list_display_links : A list of fields for links search_fields : A list of fields for searching","title":"FilmAdmin (admin.ModelAdmin)"},{"location":"server_app/#cinemaadmin-adminmodeladmin","text":"A class for displaying Cinema entity in proper way for Admin-page Attributes : list_display : A list of fields for displaying in Admin-page list_display_links : A list of fields for links search_fields : A list of fields for searching","title":"CinemaAdmin (admin.ModelAdmin):"},{"location":"server_app/#posteradmin-adminmodeladmin","text":"A class for displaying Poster entity in proper way for Admin-page Attributes : list_display : A list of fields for displaying in Admin-page list_display_links : A list of fields for links search_fields : A list of fields for searching","title":"PosterAdmin (admin.ModelAdmin):"},{"location":"server_app/#timelineadmin-adminmodeladmin","text":"A class for displaying Timeline entity in proper way for Admin-page Attributes : list_display : A list of fields for displaying in Admin-page list_display_links : A list of fields for links search_fields : A list of fields for searching","title":"TimelineAdmin (admin.ModelAdmin):"},{"location":"server_app/#halladmin-adminmodeladmin","text":"A class for displaying Hall entity in proper way for Admin-page Attributes : list_display : A list of fields for displaying in Admin-page list_display_links : A list of fields for links search_fields : A list of fields for searching","title":"HallAdmin (admin.ModelAdmin):"},{"location":"server_app/#ticketadmin-adminmodeladmin","text":"A class for displaying Ticket entity in proper way for Admin-page Attributes : list_display : A list of fields for displaying in Admin-page list_display_links : A list of fields for links search_fields : A list of fields for searching","title":"TicketAdmin (admin.ModelAdmin):"},{"location":"server_app/#staffadmin-adminmodeladmin","text":"A class for displaying Staff entity in proper way for Admin-page Attributes : list_display : A list of fields for displaying in Admin-page list_display_links : A list of fields for links search_fields : A list of fields for searching","title":"StaffAdmin (admin.ModelAdmin):"},{"location":"server_app/#formspy","text":"","title":"forms.py"},{"location":"server_app/#hallform-formsmodelform","text":"A class that represents a form for Hall entity","title":"HallForm (forms.ModelForm):"},{"location":"server_app/#cinemaform-formsmodelform","text":"A class that represents a form for Cinema entity","title":"CinemaForm (forms.ModelForm):"},{"location":"server_app/#posterform-formsmodelform","text":"A class that represents a form for Poster entity","title":"PosterForm (forms.ModelForm):"},{"location":"server_app/#timelineform-formsmodelform","text":"A class that represents a form for Timeline entity","title":"TimelineForm (forms.ModelForm):"},{"location":"server_app/#modelspy","text":"","title":"models.py"},{"location":"server_app/#film-modelsmodel","text":"A class that represents Film entity Attributes : GENRE : An enumeration for available genres title : A film's title description : A film's description date : A film's date duration : A film's duration genre : A film's genre video_url : A film's trailer URL ( youtube ) pic_url : A film's poster URL","title":"Film (models.Model):"},{"location":"server_app/#cinema-modelsmodel","text":"A class that represents Cinema entity Attributes : name : A cinema's name address : A cinema's address in current city city : City's name telephone : A cinema's telephone geo_lat : Latitude for location on the map geo_lon : Longitude for location on the map pic_url : A cinema's picture/logo URL","title":"Cinema (models.Model):"},{"location":"server_app/#poster-modelsmodel","text":"A class that represents Poster entity Attributes : cinema_id : Cinema's ID for linking film_id : Film's ID for linking","title":"Poster (models.Model):"},{"location":"server_app/#hall-modelsmodel","text":"A class that represents Hall entity Attributes : name : A hall's name cinema_id : Cinema's ID for linking hall_json : JSON-entity for hall rendering","title":"Hall (models.Model):"},{"location":"server_app/#timeline-modelsmodel","text":"A class that represents Timeline entity Attributes : cinema_id : Cinema's ID for linking film_id : Film's ID for linking hall_id : Hall's ID for linking time : A session's time date : A session's date price : A price for current price","title":"Timeline (models.Model):"},{"location":"server_app/#ticket-modelsmodel","text":"A class that represents Ticket entity Attributes : STATUS : A enumeration that contains Ticket's status place : Place in hall for current session status : Ticket's status user : A User's ID timeline_id : Timeline's ID for linking","title":"Ticket (models.Model):"},{"location":"server_app/#staff-modelsmodel","text":"A class that represents Staff entity. Attributes : user_id : User's ID for linking cinema_id : Cinema's ID for linking","title":"Staff (models.Model):"},{"location":"server_app/#permissionpy","text":"","title":"permission.py"},{"location":"server_app/#isstafforadminwriteonly-permissionsbasepermission","text":"Custom permission for certain REST endpoints So if you are certain user or anon - you could only fulfill GET request to marked endpoints; if you are staff or admin - you could fulfill all types of requests Methods :","title":"IsStaffOrAdminWriteOnly (permissions.BasePermission):"},{"location":"server_app/#has_permissionself-request-view","text":"Check your user's type to allow access to write operations return True if permission is granted","title":"has_permission(self, request, view):"},{"location":"server_app/#serializerspy","text":"","title":"serializers.py"},{"location":"server_app/#filmserializer-serializersmodelserializer","text":"Serializer for Film entity","title":"FilmSerializer (serializers.ModelSerializer):"},{"location":"server_app/#cinemaserializer-serializersmodelserializer","text":"Serializer for Cinema entity","title":"CinemaSerializer (serializers.ModelSerializer):"},{"location":"server_app/#timelineserializer-serializersmodelserializer","text":"Serializer for Timeline entity","title":"TimelineSerializer (serializers.ModelSerializer):"},{"location":"server_app/#posterserializer-serializersmodelserializer","text":"Serializer for Poster entity","title":"PosterSerializer (serializers.ModelSerializer):"},{"location":"server_app/#hallserializer-serializersmodelserializer","text":"Serializer for Hall entity","title":"HallSerializer (serializers.ModelSerializer):"},{"location":"server_app/#ticketserializer-serializersmodelserializer","text":"Serializer for Film entity Methods :","title":"TicketSerializer (serializers.ModelSerializer):"},{"location":"server_app/#get_codeself","text":"Generate ticket's QR code return unique ticket code","title":"get_code(self):"},{"location":"server_app/#createself-validated_data","text":"Create new Ticket entity using pre-generated unique QR-code param validated_data return created Ticket entity","title":"create(self, validated_data):"},{"location":"server_app/#staffserializer-serializersmodelserializer","text":"Serializer for Film entity","title":"StaffSerializer (serializers.ModelSerializer):"},{"location":"server_app/#userserializer-serializersmodelserializer","text":"Serializer for Film entity Methods :","title":"UserSerializer (serializers.ModelSerializer):"},{"location":"server_app/#createself-validated_data_1","text":"Create new User from mobile-client; pay attention on is_staff field - it is False param validated_data return created User","title":"create(self, validated_data):"},{"location":"server_app/#tablespy","text":"","title":"tables.py"},{"location":"server_app/#filmtable-tablestable","text":"Table for Film entities; used for generation bootstrap-table Attributes : about_col : extra column for opening \"About Film\" page","title":"FilmTable (tables.Table):"},{"location":"server_app/#cinematableeditable-tablestable","text":"Table for Cinema entities ( editable ); used for generation bootstrap-table Attributes : update_col : extra column for updating entity delete_col : extra column for deleting entity about_col : extra column for opening \"About Cinema\" page","title":"CinemaTableEditable (tables.Table):"},{"location":"server_app/#cinematableuneditable-tablestable","text":"Table for Cinema entities ( uneditable ); used for generation bootstrap-table Attributes : about_col : extra column for opening \"About Cinema\" page","title":"CinemaTableUneditable (tables.Table):"},{"location":"server_app/#postertable-tablestable","text":"Table for Poster entities; used for generation bootstrap-table Attributes : delete_col : extra column for deleting entity","title":"PosterTable (tables.Table):"},{"location":"server_app/#tickettable-tablestable","text":"Table for Ticket entities; used for generation bootstrap-table","title":"TicketTable (tables.Table):"},{"location":"server_app/#halltable-tablestable","text":"Table for Hall entities; used for generation bootstrap-table Attributes : update_col : extra column for updating entity delete_col : extra column for deleting entity","title":"HallTable (tables.Table):"},{"location":"server_app/#timelinetable-tablestable","text":"Table for Timeline entities; used for generation bootstrap-table Attributes : delete_col : extra column for deleting entity","title":"TimelineTable (tables.Table):"},{"location":"server_app/#viewpy","text":"","title":"view.py"},{"location":"server_app/#api_filmrequest","text":"REST endpoint for Film entity param request: return Film entity","title":"api_film(request):"},{"location":"server_app/#api_cinemarequest","text":"REST endpoint for Cinema entity param request: return Cinema entity","title":"api_cinema(request):"},{"location":"server_app/#api_timelinerequest","text":"REST endpoint for Timeline entity param request: return Cinema entity","title":"api_timeline(request):"},{"location":"server_app/#api_posterrequest","text":"REST endpoint for Poster entity param request: return Poster entity","title":"api_poster(request):"},{"location":"server_app/#api_hallrequest","text":"REST endpoint for Hall entity param request: return Hall entity","title":"api_hall(request):"},{"location":"server_app/#api_ticketrequest","text":"REST endpoint for Ticket entity param request: return Ticket entity","title":"api_ticket(request):"},{"location":"server_app/#get_staff_jobrequest","text":"REST endpoint for Staff entity; used for getting Staff' job param request: return Staff entity","title":"get_staff_job(request):"},{"location":"server_app/#api_userrequest","text":"REST endpoint for User entity param request: return User entity","title":"api_user(request):"},{"location":"server_app/#createuserview-createapiview","text":"REST endpoint for creating new user","title":"CreateUserView (CreateAPIView):"},{"location":"server_app/#cinema_profilerequest-cinema_id","text":"Get Cinema's profile param request param cinema_id: current cinema's ID return chosen Cinema","title":"cinema_profile(request, cinema_id):"},{"location":"server_app/#about_filmrequest-film_id","text":"Get Film's info param request: param film_id: current Film's ID return chosen Film","title":"about_film(request, film_id):"},{"location":"server_app/#about_devrequest","text":"Get about dev page param request return about dev page","title":"about_dev(request):"},{"location":"server_app/#about_projectrequest","text":"Get about project page param request return about project page","title":"about_project(request):"},{"location":"server_app/#filmtableviewexportmixin-singletableview","text":"Get all Films entities as a table","title":"FilmTableView(ExportMixin, SingleTableView):"},{"location":"server_app/#getself-request-args-kwargs","text":"Returns Film's table param request param args param kwargs return Film's table","title":"get(self, request, *args, **kwargs):"},{"location":"server_app/#cinema_table_allrequest","text":"Returns all Cinema entities as a table param request return Cinema's table","title":"cinema_table_all(request):"},{"location":"server_app/#form_cinema_updaterequest-cinema_id","text":"Returns Cinema's update form param request param cinema_id: Cinema's ID for updating return web-page for updating","title":"form_cinema_update(request, cinema_id):"},{"location":"server_app/#form_cinema_insertrequest","text":"Returns Cinema's insert form param request return web-page for creating new entity","title":"form_cinema_insert(request):"},{"location":"server_app/#get_poster_table_by_cinema_idrequest-cinema_id","text":"Returns all Poster entities with certain Cinema's ID value param request param cinema_id: linked Cinema's ID return table with all Posters","title":"get_poster_table_by_cinema_id(request, cinema_id):"},{"location":"server_app/#form_poster_insertrequest-cinema_id","text":"Returns Poster's insert form param request param cinema_id: linked Cinema's ID return web-page for creating new entity","title":"form_poster_insert(request, cinema_id):"},{"location":"server_app/#get_timeline_table_by_cinema_idrequest-cinema_id","text":"Returns all Timeline entities as a table with certain Cinema's ID value param request param cinema_id: linked Cinema's ID return table with all Timeline","title":"get_timeline_table_by_cinema_id(request, cinema_id):"},{"location":"server_app/#form_timeline_insertrequest-cinema_id","text":"Returns Timeline's insert form param request param cinema_id: linked Cinema's ID return web-page for creating new entity","title":"form_timeline_insert(request, cinema_id):"},{"location":"server_app/#get_hall_table_by_cinema_idrequest-cinema_id","text":"Returns all Hall entities as a table with certain Cinema's ID value param request param cinema_id: linked Cinema's ID return table with all Hall","title":"get_hall_table_by_cinema_id(request, cinema_id):"},{"location":"server_app/#form_hall_insertrequest-cinema_id","text":"Returns Hall's insert form param request param cinema_id: linked Hall's ID return web-page for creating new entity","title":"form_hall_insert(request, cinema_id):"},{"location":"server_app/#form_hall_updaterequest-cinema_id-hall_id","text":"Returns Hall's update form param request param cinema_id: linked Cinema's ID param hall_id: Hall's ID for updating return web-page for updating","title":"form_hall_update(request, cinema_id, hall_id):"},{"location":"server_monolith/","text":"server_monolith views.py index_page(request) : Handler for Index; return page with or without Staff's data param request return index web page custom_profile(request) : Handler for profile page param request return profile web-page","title":"server_monolith"},{"location":"server_monolith/#server_monolith","text":"","title":"server_monolith"},{"location":"server_monolith/#viewspy","text":"","title":"views.py"},{"location":"server_monolith/#index_pagerequest","text":"Handler for Index; return page with or without Staff's data param request return index web page","title":"index_page(request):"},{"location":"server_monolith/#custom_profilerequest","text":"Handler for profile page param request return profile web-page","title":"custom_profile(request):"}]}